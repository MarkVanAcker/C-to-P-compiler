# Generated from C.g4 by ANTLR 4.6
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\34")
        buf.write("\u00b6\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\3\2\3\2\3\3\3\3\3\4\3\4")
        buf.write("\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3")
        buf.write("\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\17")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\22\3\22\3\22\3\22\3\23\3\23\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\25\3\25\3\25\3\25\3\25\3\26\3\26\7\26u\n\26\f")
        buf.write("\26\16\26x\13\26\3\27\3\27\7\27|\n\27\f\27\16\27\177\13")
        buf.write("\27\3\27\5\27\u0082\n\27\3\30\3\30\7\30\u0086\n\30\f\30")
        buf.write("\16\30\u0089\13\30\3\30\5\30\u008c\n\30\3\30\3\30\6\30")
        buf.write("\u0090\n\30\r\30\16\30\u0091\3\31\3\31\3\31\3\31\3\32")
        buf.write("\6\32\u0099\n\32\r\32\16\32\u009a\3\32\3\32\3\33\3\33")
        buf.write("\3\33\3\33\7\33\u00a3\n\33\f\33\16\33\u00a6\13\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\7\33\u00ae\n\33\f\33\16\33\u00b1")
        buf.write("\13\33\5\33\u00b3\n\33\3\33\3\33\3\u00a4\2\34\3\3\5\4")
        buf.write("\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17")
        buf.write("\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63")
        buf.write("\33\65\34\3\2\5\5\2C\\aac|\5\2\13\f\17\17\"\"\4\2\f\f")
        buf.write("\17\17\u00bf\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3")
        buf.write("\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2")
        buf.write("\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2")
        buf.write("\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2")
        buf.write("#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2")
        buf.write("\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65")
        buf.write("\3\2\2\2\3\67\3\2\2\2\59\3\2\2\2\7;\3\2\2\2\t=\3\2\2\2")
        buf.write("\13?\3\2\2\2\rA\3\2\2\2\17C\3\2\2\2\21E\3\2\2\2\23G\3")
        buf.write("\2\2\2\25K\3\2\2\2\27M\3\2\2\2\31O\3\2\2\2\33Q\3\2\2\2")
        buf.write("\35S\3\2\2\2\37V\3\2\2\2![\3\2\2\2#a\3\2\2\2%e\3\2\2\2")
        buf.write("\'g\3\2\2\2)m\3\2\2\2+r\3\2\2\2-\u0081\3\2\2\2/\u008b")
        buf.write("\3\2\2\2\61\u0093\3\2\2\2\63\u0098\3\2\2\2\65\u00b2\3")
        buf.write("\2\2\2\678\7=\2\28\4\3\2\2\29:\7*\2\2:\6\3\2\2\2;<\7+")
        buf.write("\2\2<\b\3\2\2\2=>\7]\2\2>\n\3\2\2\2?@\7_\2\2@\f\3\2\2")
        buf.write("\2AB\7-\2\2B\16\3\2\2\2CD\7/\2\2D\20\3\2\2\2EF\7\61\2")
        buf.write("\2F\22\3\2\2\2GH\7f\2\2HI\7g\2\2IJ\7h\2\2J\24\3\2\2\2")
        buf.write("KL\7.\2\2L\26\3\2\2\2MN\7?\2\2N\30\3\2\2\2OP\7>\2\2P\32")
        buf.write("\3\2\2\2QR\7@\2\2R\34\3\2\2\2ST\7?\2\2TU\7?\2\2U\36\3")
        buf.write("\2\2\2VW\7e\2\2WX\7j\2\2XY\7c\2\2YZ\7t\2\2Z \3\2\2\2[")
        buf.write("\\\7h\2\2\\]\7n\2\2]^\7q\2\2^_\7c\2\2_`\7v\2\2`\"\3\2")
        buf.write("\2\2ab\7k\2\2bc\7p\2\2cd\7v\2\2d$\3\2\2\2ef\7,\2\2f&\3")
        buf.write("\2\2\2gh\7e\2\2hi\7q\2\2ij\7p\2\2jk\7u\2\2kl\7v\2\2l(")
        buf.write("\3\2\2\2mn\7x\2\2no\7q\2\2op\7k\2\2pq\7f\2\2q*\3\2\2\2")
        buf.write("rv\t\2\2\2su\t\2\2\2ts\3\2\2\2ux\3\2\2\2vt\3\2\2\2vw\3")
        buf.write("\2\2\2w,\3\2\2\2xv\3\2\2\2y}\4\63;\2z|\4\62;\2{z\3\2\2")
        buf.write("\2|\177\3\2\2\2}{\3\2\2\2}~\3\2\2\2~\u0082\3\2\2\2\177")
        buf.write("}\3\2\2\2\u0080\u0082\7\62\2\2\u0081y\3\2\2\2\u0081\u0080")
        buf.write("\3\2\2\2\u0082.\3\2\2\2\u0083\u0087\4\63;\2\u0084\u0086")
        buf.write("\4\62;\2\u0085\u0084\3\2\2\2\u0086\u0089\3\2\2\2\u0087")
        buf.write("\u0085\3\2\2\2\u0087\u0088\3\2\2\2\u0088\u008c\3\2\2\2")
        buf.write("\u0089\u0087\3\2\2\2\u008a\u008c\7\62\2\2\u008b\u0083")
        buf.write("\3\2\2\2\u008b\u008a\3\2\2\2\u008c\u008d\3\2\2\2\u008d")
        buf.write("\u008f\7\60\2\2\u008e\u0090\4\62;\2\u008f\u008e\3\2\2")
        buf.write("\2\u0090\u0091\3\2\2\2\u0091\u008f\3\2\2\2\u0091\u0092")
        buf.write("\3\2\2\2\u0092\60\3\2\2\2\u0093\u0094\7)\2\2\u0094\u0095")
        buf.write("\13\2\2\2\u0095\u0096\7)\2\2\u0096\62\3\2\2\2\u0097\u0099")
        buf.write("\t\3\2\2\u0098\u0097\3\2\2\2\u0099\u009a\3\2\2\2\u009a")
        buf.write("\u0098\3\2\2\2\u009a\u009b\3\2\2\2\u009b\u009c\3\2\2\2")
        buf.write("\u009c\u009d\b\32\2\2\u009d\64\3\2\2\2\u009e\u009f\7\61")
        buf.write("\2\2\u009f\u00a0\7,\2\2\u00a0\u00a4\3\2\2\2\u00a1\u00a3")
        buf.write("\13\2\2\2\u00a2\u00a1\3\2\2\2\u00a3\u00a6\3\2\2\2\u00a4")
        buf.write("\u00a5\3\2\2\2\u00a4\u00a2\3\2\2\2\u00a5\u00a7\3\2\2\2")
        buf.write("\u00a6\u00a4\3\2\2\2\u00a7\u00a8\7,\2\2\u00a8\u00b3\7")
        buf.write("\61\2\2\u00a9\u00aa\7\61\2\2\u00aa\u00ab\7\61\2\2\u00ab")
        buf.write("\u00af\3\2\2\2\u00ac\u00ae\n\4\2\2\u00ad\u00ac\3\2\2\2")
        buf.write("\u00ae\u00b1\3\2\2\2\u00af\u00ad\3\2\2\2\u00af\u00b0\3")
        buf.write("\2\2\2\u00b0\u00b3\3\2\2\2\u00b1\u00af\3\2\2\2\u00b2\u009e")
        buf.write("\3\2\2\2\u00b2\u00a9\3\2\2\2\u00b3\u00b4\3\2\2\2\u00b4")
        buf.write("\u00b5\b\33\2\2\u00b5\66\3\2\2\2\r\2v}\u0081\u0087\u008b")
        buf.write("\u0091\u009a\u00a4\u00af\u00b2\3\b\2\2")
        return buf.getvalue()


class CLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    CHAR = 15
    FLOAT = 16
    INT = 17
    POINTER = 18
    CONST = 19
    VOID = 20
    IDENTIFIER = 21
    INTEGER = 22
    DECIMAL = 23
    CHARACTER = 24
    WS = 25
    COMMENT = 26

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'('", "')'", "'['", "']'", "'+'", "'-'", "'/'", "'def'", 
            "','", "'='", "'<'", "'>'", "'=='", "'char'", "'float'", "'int'", 
            "'*'", "'const'", "'void'" ]

    symbolicNames = [ "<INVALID>",
            "CHAR", "FLOAT", "INT", "POINTER", "CONST", "VOID", "IDENTIFIER", 
            "INTEGER", "DECIMAL", "CHARACTER", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "CHAR", "FLOAT", "INT", "POINTER", "CONST", "VOID", "IDENTIFIER", 
                  "INTEGER", "DECIMAL", "CHARACTER", "WS", "COMMENT" ]

    grammarFileName = "C.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.6")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


